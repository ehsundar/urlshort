// Code generated by sqlc. DO NOT EDIT.
// source: query.sql

package pg

import (
	"context"
	"time"
)

const create = `-- name: Create :one
insert into links(short, long)
values ($1, $2)
returning short
`

type CreateParams struct {
	Short string
	Long  string
}

func (q *Queries) Create(ctx context.Context, arg CreateParams) (string, error) {
	row := q.db.QueryRowContext(ctx, create, arg.Short, arg.Long)
	var short string
	err := row.Scan(&short)
	return short, err
}

const delete = `-- name: Delete :exec
delete
from links
where short = $1
`

func (q *Queries) Delete(ctx context.Context, short string) error {
	_, err := q.db.ExecContext(ctx, delete, short)
	return err
}

const getLong = `-- name: GetLong :one
select long
from links
where short = $1
limit 1
`

func (q *Queries) GetLong(ctx context.Context, short string) (string, error) {
	row := q.db.QueryRowContext(ctx, getLong, short)
	var long string
	err := row.Scan(&long)
	return long, err
}

const list = `-- name: List :many
select short, long, created_at
from links
order by created_at desc
`

type ListRow struct {
	Short     string
	Long      string
	CreatedAt time.Time
}

func (q *Queries) List(ctx context.Context) ([]ListRow, error) {
	rows, err := q.db.QueryContext(ctx, list)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListRow
	for rows.Next() {
		var i ListRow
		if err := rows.Scan(&i.Short, &i.Long, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
